#!/usr/bin/env bash
#
# This script is used to form Vaultron with Terraform
#
# Some of these would work only for pure POSIX
# shellcheck disable=SC2154,SC1091

. ./skydome

TF_VAR_vault_custom_instance_count="${TF_VAR_vault_custom_instance_count:-0}"

if [ ! -d "$VAULTRON_TMP" ]; then
  if ! mkdir -p "$VAULTRON_TMP" 2>/dev/null; then
    msg alert "Cannot create temporary directory: $VAULTRON_TMP"
    exit 1
  fi
fi

if [ -z "$TF_VAR_vaultron_telemetry_count" ]; then
  TF_VAR_vaultron_telemetry_count=0
fi

if [ "$TF_VAR_vaultron_telemetry_count" -gt 1 ]; then
  msg alert "Cannot form Vaultron with TF_VAR_vaultron_telemetry_count greater than one!"
  exit 1
fi

form_message() {
cat << 'EOF'

You can now visit the Vault web UI at https://localhost:8200

or visit the Consul web UI at https://localhost:8500

You can also interact with vault and consul CLI utilities after
exporting the following environment variables in your shell:

export CONSUL_HTTP_ADDR="127.0.0.1:8500"
export CONSUL_HTTP_SSL=true
export VAULT_ADDR="https://127.0.0.1:8200"
export CONSUL_HTTP_TOKEN="vaultron-forms-and-eats-all-the-tacos-in-town"

or use this command to do it for you:

. ./ion_darts
EOF
}

# Check for Docker proc and socket and bail out if either is absent
check_docker() {
  DOCK_PROC_COUNT="$(pgrep docker | wc -l)"
  if [ "$DOCK_PROC_COUNT" -lt 2 ]; then
    msg alert "Docker daemon not detected - cannot form Vaultron!"
    exit 1
  fi
  if ! [ -S /var/run/docker.sock ]; then
    msg alert "Docker socket not detected - cannot form Vaultron!"
    exit 1
  fi
}

# TerraFORM Vaultron!

check_consul_version() {
  if [ ! -z "$TF_VAR_consul_version" ]; then
    USER_CONSUL_CONFIG="./red_lion/templates/consul_oss_server_config_${TF_VAR_consul_version}.tpl";
    if [ ! -f "$USER_CONSUL_CONFIG" ]; then
       msg alert "Sorry, Vaultron does not support Consul version: ${TF_VAR_consul_version}";
       unset TF_VAR_consul_version;
       kill -INT $$
    fi
  fi
}

check_vault_version() {
  if [ ! -z "$TF_VAR_vault_version" ]; then
    USER_VAULT_CONFIG="./black_lion/templates/vault_config_${TF_VAR_vault_version}.tpl";
    if [ ! -f "$USER_VAULT_CONFIG" ]; then
       msg alert "Sorry, Vaultron does not support Vault version: ${TF_VAR_vault_version}";
       unset TF_VAR_vault_version;
       kill -INT $$
    fi
  fi
}

check_custom_binary() {
  if [ "$TF_VAR_vault_custom_instance_count" -gt 0 ]; then
    if [ ! -f ./custom/"$1" ]; then
      msg alert "Vaultron cannot form! You specified a custom binary to use, but ./custom/$1 was not found."
      exit 1
    fi
  fi
}

if [ -z "$(command -v terraform)" ]; then
  msg alert "Vaultron cannot form! Could not locate terraform command."
  msg info "Get Terraform from: https://www.terraform.io/downloads.html"
  exit 1
fi

# Preflight checks
check_docker
check_custom_binary vault

# DO IT.
msg greeting "Form Vaultron! ..."

tflogdir

if ! init; then
  msg alert "Vaultron cannot form! terraform init output from $init_out:"
  cat "$init_out"
  exit 1
fi

CURRENT_CONSUL_VERSION="$(echo "var.consul_version" | terraform console)"
CURRENT_VAULT_VERSION="$(echo "var.vault_version" | terraform console)"

export TF_VAR_consul_version=${TF_VAR_consul_version:-$CURRENT_CONSUL_VERSION}
export TF_VAR_vault_version=${TF_VAR_vault_version:-$CURRENT_VAULT_VERSION}

check_vault_version
check_consul_version

if [ "$TF_VAR_vault_custom_instance_count" -gt 0 ]; then
  msg notice "Vault version: custom binary: cannot determine version"
else
  msg info "Vault OSS version: ${TF_VAR_vault_version}"
fi

if ! [ -z "$TF_VAR_consul_custom" ]; then
  if [ "$TF_VAR_consul_custom" -gt 0 ]; then
    msg notice "Consul version: custom binary: cannot determine version"
  else
    msg info "Consul OSS version: ${TF_VAR_consul_version}"
  fi
fi

plan_file=./tfstate/vaultron-$(date -u "+%Y-%m-%dT%H:%M:%SZ").plan

if ! plan "${plan_file}"; then
  msg alert "Vaultron cannot form! terraform plan output from $plan_out:"
  cat "$plan_out"
  exit 1
fi

if ! apply "${plan_file}"; then
  msg alert "Vaultron cannot form! terraform apply output from $apply_out:"
  cat "$apply_out"
  exit 1
fi

rm -f "${plan_file}"
msg success "Vaultron formed!"
tput setaf 7
form_message
