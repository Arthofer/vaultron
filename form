#!/bin/sh
#
# This script is used to form Vaultron with Terraform
#
# shellcheck disable=SC2059
# shellcheck disable=SC1091

. ./skydome

_form_message () {
cat << 'EOF'
Now that Vaultron is formed, you can visit the Consul web UI
at http://localhost:8500

Or you can interact with Vault and Consul at the command line by first
exporting the following environment variables:

export CONSUL_HTTP_ADDR="localhost:8500"
export VAULT_ADDR="http://localhost:8200"

Then you can use your local vault and consul commands.
EOF
}

###
### TerraFORM Vaultron!
###
_check_consul_version() {
  if [ ! -z "$TF_VAR_consul_version" ]; then
    USER_CONSUL_CONFIG="./red_lion/templates/consul_oss_server_config_${TF_VAR_consul_version}.tpl";
    if [ ! -f "$USER_CONSUL_CONFIG" ]; then
       echo "ðŸš«  Sorry, Vaultron does not support Consul version: ${TF_VAR_consul_version}";
       unset TF_VAR_consul_version;
       kill -INT $$
    fi
  fi
}

_check_vault_version() {
  if [ ! -z "$TF_VAR_vault_version" ]; then
    USER_VAULT_CONFIG="./black_lion/templates/vault_config_${TF_VAR_vault_version}.tpl";
    if [ ! -f "$USER_VAULT_CONFIG" ]; then
       echo "ðŸš«  Sorry, Vaultron does not support Vault version: ${TF_VAR_vault_version}";
       unset TF_VAR_vault_version;
       kill -INT $$
    fi
  fi
}

if [ -z "$(command -v terraform)" ]; then
  _logmsg alert "Vaultron cannot form! Could not locate terraform command."
  _logmsg info "Get Terraform from: https://www.terraform.io/downloads.html"
  exit 1
fi

_logmsg greeting "Form Vaultron! ..."

if ! _init; then
  _logmsg alert "Vaultron cannot form! Check terraform init output."
  exit 1
fi

CURRENT_CONSUL_VERSION="$(echo "var.consul_version" | terraform console)"
CURRENT_VAULT_VERSION="$(echo "var.vault_version" | terraform console)"

export TF_VAR_consul_version=${TF_VAR_consul_version:-$CURRENT_CONSUL_VERSION}
export TF_VAR_vault_version=${TF_VAR_vault_version:-$CURRENT_VAULT_VERSION}

_check_vault_version
_check_consul_version

_logmsg greeting "Consul image version: ${TF_VAR_consul_version}"

if [ "$TF_VAR_vault_custom_instance_count" = 3 ]; then
  _logmsg greeting "Vault image version: ${TF_VAR_vault_version} (with custom binary)"
else
  _logmsg greeting "Vault image version: ${TF_VAR_vault_version}"
fi


plan_file=./tfstate/vaultron-$(date -u "+%Y-%m-%dT%H:%M:%SZ").plan

if ! _plan "${plan_file}"; then
  _logmsg alert "Vaultron cannot form! Check terraform plan output."
  exit 1
fi

if ! _apply "${plan_file}"; then
  _logmsg alert "Vaultron cannot form! Check terraform apply output."
  exit 1
fi

rm -f "${plan_file}"
_logmsg success "Vaultron formed!"
_form_message
