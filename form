#!/usr/bin/env bash
# =======================================================================
# This script is used to form Vaultron with Terraform
#
# Some of these would work only for pure POSIX
# shellcheck disable=SC2154,SC1091
# =======================================================================

. ./skydome

TF_VAR_vault_custom_instance_count="${TF_VAR_vault_custom_instance_count:-0}"

if [ ! -d "$VAULTRON_TMP" ]; then
  if ! mkdir -p "$VAULTRON_TMP" 2>/dev/null; then
    msg alert "Vaultron cannot form; cannot create temporary directory: $VAULTRON_TMP!"
    exit 1
  fi
fi

if [ -z "$TF_VAR_vaultron_telemetry_count" ]; then
  TF_VAR_vaultron_telemetry_count=0
fi

if [ "$TF_VAR_vaultron_telemetry_count" -gt 1 ]; then
  msg alert "Vaultron cannot form; TF_VAR_vaultron_telemetry_count value cannot be greater than one!"
  exit 1
fi

form_message() {
cat << 'EOF'

You can now visit the Vault web UI at https://localhost:8200

or visit the Consul web UI at https://localhost:8500

You can also interact with vault and consul CLI utilities after
exporting the following environment variables in your shell:

export CONSUL_HTTP_ADDR="127.0.0.1:8500"
export CONSUL_HTTP_SSL=true
export VAULT_ADDR="https://127.0.0.1:8200"
export CONSUL_HTTP_TOKEN="b4c0ffee-3b77-04af-36d6-738b697872e6"

or use this command to do it for you:

. ./ion_darts
EOF
}

# Check for vault file in project directory
check_existing_vault() {
  if [ -f "$PWD"/vault ]; then
    msg alert "Vaultron cannot form; there is a 'vault' file in the present working directory, but this is not allowed!"
    msg info "Please remove the existing 'vault' before forming Vaultron."
    exit 1
  fi
}

# Check for existing Vaultron private network and create if missing
check_and_create_vaultron_private_network() {
if ! docker network ls | grep vaultron-network > /dev/null 2>&1; then
  msg notice "vaultron-network not present; creating ..."
  if ! docker network create --attachable  --subnet "10.10.42.0/24" vaultron-network > /dev/null 2>&1; then
    msg alert "Cannot create vaultron-network; Vaultron cannot form without private network!"
    exit 1
  fi
  msg success "Created attachable vaultron-network with subnet 10.10.42.0/24"
fi
}

# Check for existing Vaultron containers
check_existing_vaultron_containers() {
  if docker ps -a | grep 'vaultron-{vault,consul}' > /dev/null 2>&1; then
    msg alert "Vaultron cannot form; there are Vaultron specific Vault or Consul containers currently running or stopped"
    msg info "Please unform existing Vaultron or use docker stop and docker rm to manually"
    msg info "clean up the containers shown here:"
    echo
    docker ps -a -f name=vaultron --format "table {{.Names}}\t{{.Status}}"
    exit 1
  fi
}

# TerraFORM Vaultron!
check_consul_version() {
  if [ -n "$TF_VAR_consul_version" ]; then
    USER_CONSUL_CONFIG="../../red_lion/templates/oss/consul_oss_server_config_${TF_VAR_consul_version}.hcl";
    if [ ! -f "$USER_CONSUL_CONFIG" ]; then
       msg alert "Vaultron cannot form; sorry, Vaultron does not support Consul version: ${TF_VAR_consul_version}!";
       unset TF_VAR_consul_version;
       kill -INT $$
    fi
  fi
}

check_vault_version() {
  if [ -n "$TF_VAR_vault_version" ]; then
    USER_VAULT_CONFIG="../../black_lion/templates/oss/vault_config_${TF_VAR_vault_version}.hcl";
    if [ ! -f "$USER_VAULT_CONFIG" ]; then
       msg alert "Vaultron cannot form; sorry, Vaultron does not support Vault version: ${TF_VAR_vault_version}!";
       unset TF_VAR_vault_version;
       kill -INT $$
    fi
  fi
}

check_custom_binary() {
  if [ "$TF_VAR_vault_custom_instance_count" -gt 0 ]; then
    if [ ! -f ../../custom/"$1" ]; then
      msg alert "Vaultron cannot form; custom binary specified, but ../../custom/$1 was not found!"
      exit 1
    fi
  fi
}

if [ -z "$(command -v vault)" ]; then
  msg alert "Vaultron cannot form; could not locate vault command in PATH!"
  msg info "Get Vault from: https://www.vaultproject.io/downloads.html"
  exit 1
fi

if [ -z "$(command -v consul)" ]; then
  msg alert "Vaultron cannot form; could not locate consul command in PATH!"
  msg info "Get Consul from: https://www.consul.io/downloads.html"
  exit 1
fi

if [ -z "$(command -v terraform)" ]; then
  msg alert "Vaultron cannot form; could not locate terraform command in PATH!"
  msg info "Get Terraform from: https://www.terraform.io/downloads.html"
  exit 1
fi

# Preflight checks
check_flavor

# SAVOR THE FLAVOR!
cd "flavors/$TF_VAR_flavor"

check_docker
check_and_create_vaultron_private_network
check_custom_binary vault
check_existing_vaultron_containers
check_existing_vault

# DO IT.
msg greeting "Form Vaultron! ..."

tflogdir

if ! init; then
  msg alert "Vaultron cannot form; here is the terraform init output from $init_out:"
  cat "$init_out"
  exit 1
fi

CURRENT_CONSUL_VERSION="$(echo "var.consul_version" | terraform console)"
CURRENT_VAULT_VERSION="$(echo "var.vault_version" | terraform console)"

export TF_VAR_consul_version=${TF_VAR_consul_version:-$CURRENT_CONSUL_VERSION}
export TF_VAR_vault_version=${TF_VAR_vault_version:-$CURRENT_VAULT_VERSION}

check_vault_version

if [ "$TF_VAR_flavor" = "consul" ]; then
  check_consul_version
fi

if [ "$TF_VAR_vault_custom_instance_count" -gt 0 ]; then
  # we won't be needing this...
  unset TF_VAR_vault_version
  msg notice "Vault version: custom binary"
else
  msg info "Vault OSS version: ${TF_VAR_vault_version}"
fi

if [ "$TF_VAR_flavor" = "consul" ]; then
  if [ -n "$TF_VAR_consul_custom" ]; then
  if [ "$TF_VAR_consul_custom" -gt 0 ]; then
    msg info "Consul version: custom binary"
  else
    msg info "Consul OSS version: ${TF_VAR_consul_version}"
  fi
else
  msg info "Consul OSS version: ${TF_VAR_consul_version}"
fi
fi

plan_file=./tfstate/vaultron-$(date -u "+%Y-%m-%dT%H:%M:%SZ").plan

if ! plan "${plan_file}"; then
  msg alert "Vaultron cannot form; here is the terraform plan output from $plan_out:"
  cat "$plan_out"
  exit 1
fi

if ! apply "${plan_file}"; then
  msg alert "Vaultron cannot form; here is the terraform apply output from $apply_out:"
  cat "$apply_out"
  exit 1
fi

rm -f "${plan_file}"
msg success "Vaultron formed!"
tput setaf 7
form_message
tput sgr0

cd ../..
