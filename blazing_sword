#!/bin/sh
# =======================================================================
#           ‼️ PLEASE DO NOT USE VAULTRON IN PRODUCTION ‼️
#
# blazing_sword.sh
#
# Automatically starts and pre-populates Vault cluster for use in development
# or other evaluation style use cases:
#
# - Initialize Vault
# - Save key material to temporary file
# - Unseal Vault with key material from temporary file
# - Enable a range of auth methods and secrets engines with a vaultron prefix
#   with blazing_sword Terraform configuration
#   (see examples/terraform for the configuration used)
#
# shellcheck disable=SC1091,SC2039,SC2059,SC2086,SC2154
# =======================================================================

. ./skydome

# Check for the existence of a temporary key material file
check_vault_file() {
  for file in "$TF_VAR_vault_flavor"/vault/vault_*.tmp; do
    if [ -e "$file" ]; then
        msg info "Existing Vault file detected; pass filename as first argument and it will be used for unsealing."
        exit 0
    fi
  done
}

# Authenticate with initial root token
auth_root() {
  check_cli_cap
  get_initial_root_token "${VAULT_DAT}"
  if [ "$VAULT_CLI_CAP" -eq "1" ]; then
    LOGIN_CMD="vault login $INITIAL_ROOT_TOKEN"
  else
    LOGIN_CMD="vault auth $INITIAL_ROOT_TOKEN"
  fi
  msg info "Authenticating with initial root token ..."
  if ! $LOGIN_CMD > /dev/null 2>&1; then
    msg alert "Could not authenticate with initial root token!"
    exit 1
  else
    msg success "Authenticated with initial root token!"
  fi
}

# Enable all the things
enable_all() {
  msg info "Enabling audit device, auth methods, secrets engines, and policies ..."
  cd examples/terraform || exit 1
  rm -rf .terraform > /dev/null 2>&1
  rm -f terraform.tfstate > /dev/null 2>&1
  rm -f vault.plan > /dev/null 2>&1
  terraform init > /dev/null 2>&1 && \
  terraform plan -out vault.plan > /dev/null 2>&1 && \
  terraform apply "vault.plan" > /dev/null 2>&1
  msg success "Audit device, auth methods, secrets engines, and policies enabled!"
}

# List enabled auth methods and secrets engines
enabled() {
  echo
  msg info "Enabled Auth Methods:"
  echo
  check_cli_cap
  if [ "$VAULT_CLI_CAP" -eq "1" ]; then
    AUTH_LIST_CMD="vault auth list"
  else
    AUTH_LIST_CMD="vault auth -methods"
  fi
  if [ "$VAULT_CLI_CAP" -eq "1" ]; then
    SECRETS_LIST_CMD="vault secrets list"
  else
    SECRETS_LIST_CMD="vault mounts"
  fi
  $AUTH_LIST_CMD
  echo
  msg info "Enabled Secrets Engines:"
  echo
  $SECRETS_LIST_CMD
  echo
  tput setaf 0
}

# Get unseal key
get_unseal_key() {
  msg info "Get unseal key ..."
  k0=$(grep 'Unseal Key 1' "${VAULT_DAT}" | awk '{print $NF}')
}

# Get the initial root token
get_initial_root_token() {
  msg info "Get initial root token ..."
  INITIAL_ROOT_TOKEN=$(grep 'Initial Root Token' "${1}" | awk '{print $NF}')
}

# Initialize Vault and save temporary unseal keys and root token
initialize_vault() {
  check_cli_cap
  if [ "$VAULT_CLI_CAP" -eq "1" ]; then
    INIT_CMD="vault operator init -key-shares=1  -key-threshold=1"
  else
    INIT_CMD="vault init -key-shares=1  -key-threshold=1"
  fi
  msg info "Initializing Vault ..."
  VAULT_DAT="$TF_VAR_vault_flavor/vault/vault_DEV_ONLY-$(date +%s).tmp"
  # Tidy control characters from initialization output before writing
  if output="$($INIT_CMD)"; then
    echo "$output" | awk '{gsub(/\033\[[0-9]+m/,""); print}' > "${VAULT_DAT}"
  else
    msg alert "Cannot initialize Vault!"
    msg alert "$output"
    exit 1
  fi
   msg complete "Vault initialized!"
}

# Get Vault status
status() {
  msg info "Vault status:"
  printf "\\n%s" "$(vault status)"
  printf "\\n"
}

# Note about statsd server for Telemetry
telemetry_info() {
  if VSTATSD_ADDR=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vaultron-vstatsd) > /dev/null 2>&1; then
    msg info "Telemetry: statsd address: $VSTATSD_ADDR"
  else
    msg alert "Cannot determine statsd address!"
  fi
}

# Consul leader container info
consul_leader_info() {
  if CONSUL_LEADER_ADDR=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vaultron-consuls0) > /dev/null 2>&1; then
    msg info "Consul leader address: $CONSUL_LEADER_ADDR"
  else
    msg alert "Cannot determine Consul leader address!"
  fi
}

# Initial Vault active container info
vault_active_info() {
  if VAULT_ACTIVE_ADDR=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vaultron-vault0) > /dev/null 2>&1; then
    msg info "Active Vault address: $VAULT_ACTIVE_ADDR"
  else
    msg alert "Cannot determine active Vault address!"
  fi
}

# Unseal Vault
unseal_vault() {
  check_cli_cap
  if [ "$VAULT_CLI_CAP" -eq "1" ]; then
    UNSEAL_CMD="vault operator unseal"
  else
    UNSEAL_CMD="vault unseal"
  fi
  msg info "Unsealing Vault ..."
  get_unseal_key

  if ! VAULT_ADDR="https://localhost:8200" \
    $UNSEAL_CMD "$k0" > /dev/null 2>&1; then
    msg alert "Cannot unseal Vault 1!"
    errors=$((errors + $?))
    exit $errors
  fi

  if ! VAULT_ADDR="https://localhost:8210" \
    $UNSEAL_CMD "$k0" > /dev/null 2>&1; then
    msg alert "Cannot unseal Vault 2!"
    errors=$((errors + $?))
    exit $errors
  fi

  if ! VAULT_ADDR="https://localhost:8220" \
    $UNSEAL_CMD "$k0" > /dev/null 2>&1; then
    msg alert "Cannot unseal Vault 3!"
    errors=$((errors + $?))
    exit $errors
  fi

  msg complete "Vault unsealed!"
}

msg greeting "Blazing Sword! ..."

# Ain't nobody got time for your stale token up in here!
unset VAULT_TOKEN

# Because what fun is a project without a little raciness?
sleep 1
initialize_vault
unseal_vault
auth_root
enable_all
status
enabled
vault_active_info
consul_leader_info

if [ "$TF_VAR_vaultron_telemetry_count" = "1" ]; then
  telemetry_info
fi

tput sgr0
