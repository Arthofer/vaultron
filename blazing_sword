#!/bin/sh
#
# blazing_sword
#
# Automatically starts a Vault cluster for use in development or other
# evaluation style use cases:
#
# - Initialize Vault
# - Save key material to temporary file
# - Unseal Vault with key material from temporary file
# - Enable a range of auth methods and secrets engines with default mounts
#
# ‼️ PLEASE DO NOT USE THIS IN PRODUCTION ‼️
#
# Pick one, fix one!
# shellcheck disable=SC1117,SC2154,SC2059,SC2039,SC1091

. ./skydome

# Check for the existence of a temporary key material file
check_vault_file() {
  for file in ./vault/vault_*.tmp; do
    if [ -e "$file" ]; then
        msg info "Existing Vault file detected; pass filename as first argument and it will be used for unsealing."
        exit 0
    fi
  done
}

# Emit a little usage note
usage() {
  msg alert "Usage: blazing_sword [vault_dat.tmp]"
  exit 1
}

# Authenticate with initial root token
auth_root() {
  msg info "Authenticating with Vault root token ..."
  get_initial_root_token "${vault_dat}"
  vault auth "${init_root_token}"  > /dev/null 2>&1
}

# List enabled auth methods and secrets engines
enabled() {
  msg info "Enabled Auth Methods:"
  check_cli_cap
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_auth_list_cmd="vault auth list"
  else
    v_auth_list_cmd="vault auth -methods"
  fi
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_secret_list_cmd="vault secrets list"
  else
    v_secret_list_cmd="vault mounts"
  fi
  $v_auth_list_cmd
  echo
  msg info "Enabled Secrets Engines:"
  $v_secret_list_cmd
  echo
}

# Enable a file based audit log
enable_audit_logging() {
  msg complete "Enabled file based audit log at ./vault/logs/audit.log!"
  auth_root
  vault audit-enable file file_path=/vault/logs/audit.log  > /dev/null 2>&1
}

# Enable authentication backends
enable_auth_backends() {
  check_cli_cap
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_auth_cmd="vault auth enable"
  else
    v_auth_cmd="vault auth-enable"
  fi
  msg info "Enabling Vault authentication backends ..."
  auth_root

  $v_auth_cmd -path=vaultron-approle approle > /dev/null 2>&1
  msg complete "Enabled AppRole authentication backend at vaultron-approle!"

  # TODO: This needs to be conditionally added based on installed Vault
  # version as aws auth does not exist in older Vault versions
  #
  # vault auth-enable aws > /dev/null 2>&1
  # msg complete "Enabled AWS authentication backend!"
  #

  $v_auth_cmd -path vaultron-cert cert > /dev/null 2>&1
  msg complete "Enabled TLS certificate authentication backend at vaultron-cert!"

  $v_auth_cmd -path=vaultron-ldap ldap > /dev/null 2>&1
  msg complete "Enabled LDAP authentication backend at vaultron-ldap!"

  $v_auth_cmd -path=vaultron-userpass userpass > /dev/null 2>&1
  msg complete "Enabled Username & Password authentication backend at vaultron-userpass!"
}

# Get a subset of unseal keys
get_unseal_keys() {
  msg info "Get unseal keys ..."
  k0=$(grep 'Unseal Key 1' "${vault_dat}" | awk '{print $NF}')
}

# Get the initial root token
get_initial_root_token() {
  init_root_token=$(grep 'Initial Root Token' "${1}" | awk '{print $NF}')
}

# Initialize Vault and save temporary unseal keys and root token
initialize_vault() {
  check_cli_cap
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_init_cmd="vault operator init -key-shares=1  -key-threshold=1"
  else
    v_init_cmd="vault init -key-shares=1  -key-threshold=1"
  fi
  msg info "Initializing Vault ..."
  vault_dat="./vault/vault_DEV_ONLY-$(date +%s).tmp"
  if ! $v_init_cmd | perl -pe 's/\x1b\[[0-9;]*m//g' > "${vault_dat}"; then
    errors=$((errors + $?))
    msg alert "Failed to initialize Vault!"
    exit $errors
  else
    msg complete "Vault initialized!"
  fi
}

# Enable database secrets engine
mount_database_backend() {
  check_cli_cap
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_enable_cmd="vault secrets enable"
  else
    v_enable_cmd="vault mount"
  fi
  msg info "Enabling database secrets engine ..."
  get_initial_root_token "${vault_dat}"
  if ! $v_enable_cmd -path=vaultron-database database> /dev/null 2>&1; then
    msg alert "Problem enabling database secrets engine!"
  else
    msg complete "Enabled database secrets engine!"
  fi
}

# Enable a handy mix of secrets engines
mount_secret_backends() {
  check_cli_cap
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_enable_cmd="vault secrets enable"
  else
    v_enable_cmd="vault mount"
  fi
  msg info "Mounting Vault secret backends ..."
  get_initial_root_token "${vault_dat}"

  if ! $v_enable_cmd -path=vaultron-kv kv > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling KV secrets engine at vaultron-kv!"
    exit $errors
  else
  msg complete "Enabled KV secrets engine at vaultron-kv!"
  fi

  if ! $v_enable_cmd -path=vaultron-aws aws > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling AWS secrets engine at vaultron-aws!"
    exit $errors
  else
  msg complete "Enabled AWS secrets engine at vaultron-aws!"
  fi

  if ! $v_enable_cmd -path=vaultron-consul consul > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling Consul secrets engine at vaultron-consul!"
    exit $errors
  else
  msg complete "Enabled Consul secrets engine at vaultron-consul!"
  fi

  if ! $v_enable_cmd -path=vaultron-root-pki pki > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling PKI secrets engine at vaultron-root-pki!"
    exit $errors
  else
  msg complete "Enabled PKI secrets engine at vaultron-root-pki!"
  fi

  if ! $v_enable_cmd -path=vaultron-int-pki pki > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling PKI secrets engine at vaultron-int-pki!"
    exit $errors
  else
  msg complete "Enabled PKI secrets engine at vaultron-int-pki!"
  fi

  if ! $v_enable_cmd -path=vaultron-transit transit > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling Transit secrets engine at vaultron-transit!"
    exit $errors
  else
  msg complete "Enabled Transit secrets engine at vaultron-transit!"
  fi

  if ! $v_enable_cmd -path=vaultron-ssh-host-signer ssh > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling SSH secrets engine at vaultron-ssh-host-signer!"
    exit $errors
  else
  msg complete "Enabled SSH secrets engine at vaultron-ssh-host-signer!"
  fi

  if ! $v_enable_cmd -path=vaultron-ssh-client-signer ssh > /dev/null 2>&1; then
    errors=$((errors + $?))
    msg alert "Problem enabling SSH secrets engine at vaultron-ssh-client-signer!"
    exit $errors
  else
  msg complete "Enabled SSH secrets engine at vaultron-ssh-client-signer!"
  fi
}

# Get Vault status
status() {
  msg info "Vault status:"
  echo
  printf "$(vault status)"
  echo "\n"
}

# Note about statsd server for Telemetry
telemetry() {
  if VSTATSD_ADDR=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vstatsd) > /dev/null 2>&1; then
    msg info "Telemetry: statsd address: $VSTATSD_ADDR"
  else
    msg alert "Failed to determine statsd address!"
  fi
}

# Unseal Vault
unseal_vault() {
  check_cli_cap
  if [ "$vault_cli_cap" -eq "1" ]; then
    v_unseal_cmd="vault operator unseal"
  else
    v_unseal_cmd="vault unseal"
  fi
  msg info "Unsealing Vault ..."
  get_unseal_keys

  if ! VAULT_ADDR="https://localhost:8200" \
    $v_unseal_cmd "$k0" > /dev/null 2>&1; then
    msg alert "Failed to unseal Vault 1!"
    errors=$((errors + $?))
    exit $errors
  fi

  if ! VAULT_ADDR="https://localhost:8210" \
    $v_unseal_cmd "$k0" > /dev/null 2>&1; then
    msg alert "Failed to unseal Vault 2!"
    errors=$((errors + $?))
    exit $errors
  fi

  if ! VAULT_ADDR="https://localhost:8220" \
    $v_unseal_cmd "$k0" > /dev/null 2>&1; then
    msg alert "Failed to unseal Vault 3!"
    errors=$((errors + $?))
    exit $errors
  fi

  msg complete "Vault unsealed!"
}

# DO IT.
if [ $# -gt 1 ]
  then
    usage
fi

if (set -u; : "${1}") 2> /dev/null; then
  msg info "Filename argument specified; Use file: ${1}"
  vault_dat="${1}"
  k0=$(grep 'Unseal Key 1' "${vault_dat}" | awk '{print $NF}')
  msg info "Unsealing by default since filename used ..."
  for i in {0..2}; do
    VAULT_ADDR="https://localhost:82${i}0" \
    vault unseal "${k0}" > /dev/null 2>&1 && \
    VAULT_ADDR="https://localhost:82${i}0" \
    vault unseal "${k1}" > /dev/null 2>&1 && \
    VAULT_ADDR="https://localhost:82${i}0" \
    vault unseal "${k2}" > /dev/null 2>&1;
  done
  auth_root
  status
  exit 0
else
  msg greeting "Form Blazing Sword! ..."
fi

# Ain't nobody got time for your old stale token!
unset VAULT_TOKEN

# <wait 3>
sleep 3

initialize_vault
unseal_vault
auth_root
enable_auth_backends
enable_audit_logging
mount_secret_backends
mount_database_backend
status
enabled
if [ "$TF_VAR_vaultron_telemetry_count" == "1" ]; then
  telemetry
fi
