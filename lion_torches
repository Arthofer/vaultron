#!/bin/sh
# =======================================================================
# This script is the nuclear option; it removes all traces of Vaultron
# created data so that the user can start over. It does not invoke
# Terraform and instead uses OS and docker commands only
#
# shellcheck disable=SC1091
# =======================================================================

. ./skydome

# Preflight checks
check_flavor

TF_VAR_vault_flavor=$TF_VAR_vault_flavor || TF_VAR_vault_flavor=consul

check_docker

msg greeting "Lion Torches removing all Vaultron generated data ..."

cd "flavors/$TF_VAR_vault_flavor" || echo "Cannot select flavor" && exit 1

if ! docker stop vaultron-vault
# If we cannot write to the Consul data, alert user and attempt to change
# ownership of consul/vault folders to avoid failure with Terraform destroy
# NB: This occurs on Docker on Linux but not Docker for Mac
#     This should be resolved by using SKIP_CHOWN now as well
if [ "$TF_VAR_vault_flavor" = "consul" ]; then
  if [ "$(uname)" = "Linux" ]; then
    if ! [ -w flavor/"${TF_VAR_vault_flavor}"/consul/consuls0 ]; then
      msg notice "Consul data not writable; attempting to change ownership of consul & vault folders to $VAULTRON_USER:$VAULTRON_GROUP ..."
      msg notice "You could be prompted by sudo for your user password to make this change ..."
      if ! sudo chown -R "${VAULTRON_USER}":"${VAULTRON_GROUP}" flavor/"${TF_VAR_vault_flavor}"/consul; then
        msg alert "Failed to change ownership of consul data to $VAULTRON_USER:$VAULTRON_GROUP"
        msg alert "Manual cleanup of consul folder contents required:"
        ls -lha consul/
      fi
      if ! sudo chown -R "${VAULTRON_USER}":"${VAULTRON_GROUP}" flavor/"${TF_VAR_vault_flavor}"/vault; then
        msg alert "Failed to change ownership of vault data to $VAULTRON_USER:$VAULTRON_GROUP"
        msg alert "Manual cleanup of vault folder contents required:"
        ls -lha vault/
      fi
    fi
  fi
fi

# Remove Consul client data
if [ "$TF_VAR_vault_flavor" = "consul" ]; then
  rm -rf ./consul/consulc0
  errors=$((errors + $?))
  rm -rf ./consul/consulc1
  errors=$((errors + $?))
  rm -rf ./consul/consulc2
  errors=$((errors + $?))
fi

# Remove Consul server data
if [ "$TF_VAR_vault_flavor" = "consul" ]; then
  rm -rf ./consul/consuls0
  errors=$((errors + $?))
  rm -rf ./consul/consuls1
  errors=$((errors + $?))
  rm -rf ./consul/consuls2
  errors=$((errors + $?))
fi

# Remove Vault server data
rm -rf ./vault/vault0
errors=$((errors + $?))
rm -rf ./vault/vault1
errors=$((errors + $?))
rm -rf ./vault/vault2
errors=$((errors + $?))
rm -f ./vault/vault_DEV_ONLY*.tmp
errors=$((errors + $?))

# Remove Telemetry data
rm -rf ./yellow_lion/grafana_data
errors=$((errors + $?))

# Remove Terraform state, plans, backend configuration, and logs
rm -f ./tfstate/terraform.tfstate*
errors=$((errors + $?))
rm -f ./tfstate/vaultron*.plan
errors=$((errors + $?))
rm -rf ./.terraform/modules
errors=$((errors + $?))
rm -f ./.terraform/terraform.tfstate*
errors=$((errors + $?))
rm -rf ./log/*
errors=$((errors + $?))

if [ $errors -gt 0 ]; then
  msg alert "Vaultron unformed (with $errors errors)!"
  tput sgr0
else
  msg boom "Vaultron unformed!"
  tput sgr0
fi

tput sgr0

cd ../..

exit $errors
