#!/bin/sh

# Basic Vaultron lifecycle functionality tests
#
# 1.  Test ./unform
# 2.  Test ./form
# 3.  Test Terraform state presence
# 4.  Test Consul server data directories presence after forming
# 5.  Test Terraform configuration directory presence after forming
# 6.  Test Terraform init, plan, apply log output presence after forming
# 7.  Test Blazing Sword convenience script
# 8.  Test ./unform
# 9.  Test Terraform state presence after unforming
# 10. Test Consul server data directories presence after unforming
# 11. Test Terraform configuration directory presence after unforming
# 12. Test Terraform init, plan, apply log output presence after unforming
#
# The tests should complete in ~20 seconds on decent system specs
#
# shellcheck disable=SC1091,SC1117

export txtblu="\033[0;34m" # Blue
export txtgrn="\033[0;32m" # Green
export txtred="\033[0;31m" # Red
export txtylw="\033[0;33m" # Yellow
export txtwht="\033[0;37m" # White
export txtrst="\033[0m"    # Text Reset

export CONSUL_HTTP_ADDR="localhost:8500"
export VAULT_ADDR="https://localhost:8200"

if ! ./unform; then
    echo "ðŸš«  Error unforming any previous Vaultron."
    exit 1
fi

if ! ./form; then
    echo "${txtred}ðŸš«  Error forming Vaultron!${txtrst}"
    exit 1
fi

for i in 0 1 2; do
    if ! [ -d "consul/consuls_$i" ]; then
        echo "${txtred}ðŸš«  Missing directory consul/consuls_$i after forming!${txtrst}";
        exit 1
    fi
    if ! [ -d "consul/consulc$i" ]; then
        echo "${txtred}ðŸš«  Missing directory consul/consuls_$i after forming!${txtrst}";
        exit 1
    fi
    if ! [ -d "vault/vault_$i" ]; then
        echo "${txtred}ðŸš«  Missing directory consul/consuls_$i after forming!${txtrst}";
        exit 1
    fi
done

if [ ! -f "tfstate/terraform.tfstate" ]; then
    echo "${txtred}ðŸš«  No Terraform state generated after forming:${txtrst}"
    echo "${txtred}tfstate/terraform.tfstate${txtrst}"
    exit 1
fi

if [ ! -d ".terraform" ]; then
    echo "${txtred}ðŸš«  No Terraform configuration directory after forming:${txtrst}"
    echo "${txtred}.terraform${txtrst}"
    exit 1
fi

for l in init plan apply; do
    if [ -z "$(find log -type f -name "tf-*-$l.log")" ]; then
        echo "${txtred}ðŸš«  Should be at least one log file of the form:${txtrst}"
        echo "${txtred}log/tf-*-$l.log${txtrst}"
        exit 1
    fi
done

if ! . ./ion_darts; then
    echo "${txtred}ðŸš«  Error sourcing Ion Darts!${txtrst}"
    exit 1
fi

if ! ./blazing_sword; then
    echo "${txtred}ðŸš«  Error forming Blazing Sword!${txtrst}"
    exit 1
fi

if ! ./unform; then
    echo "${txtred}ðŸš«  Error unforming any previous Vaultron!${txtrst}"
    exit 1
fi

if [ -f "tfstate/terraform.tfstate" ]; then
    echo "${txtred}ðŸš«  Terraform state file still present after unforming!${txtrst}"
    exit 1
fi

for i in 0 1 2; do
    if [ -d "consul/consuls_$i" ]; then
        echo "${txtred}ðŸš«  Directory consul/consuls_$i still present after unforming!${txtrst}"
        exit 1
    fi
    if [ -d "consul/consulc$i" ]; then
        echo "${txtred}ðŸš«  Directory consul/consuls_$i still present after unforming!${txtrst}"
        exit 1
    fi
    if [ -d "vault/vault_$i" ]; then
        echo "${txtred}ðŸš«  Directory consul/consuls_$i still present after unforming!${txtrst}"
        exit 1
    fi
done

if [ -z "$(find log -type f -name "tf-*-destroy.log")" ]; then
    echo "${txtred}ðŸš«  Should be at least one log file after destroy of the form:${txtrst}"
    echo "${txtred}log/tf-*-destroy.log${txtrst}"
    exit 1
fi
