#!/bin/sh
#
# This script contains common functions and is sourced by the
# the other Vaultron scripts; there's nothing useful in here to run directly.
#
# shellcheck disable=SC2059
#

export CONSUL_HTTP_ADDR="localhost:8500"
export VAULT_ADDR="http://localhost:8200"

export txtblu="\033[0;34m" # Blue
export txtcya="\033[0;36m" # Cyan
export txtgrn="\033[0;32m" # Green
export txtred="\033[0;31m" # Red
export txtylw="\033[0;33m" # Yellow
export txtwht="\033[0;37m" # White
export txtrst="\033[0m"    # Text Reset

###
### Log stuff
###
msg() {
    msgtype="$1"
    msgtxt="$2"
    case "${msgtype}" in
        greeting)
            printf "✨  ${txtylw}${msgtxt}\n"
            ;;
        info)
            printf "ℹ️  ${txtcya}${msgtxt}\n"
            ;;
        success)
            printf "🤖  ${txtgrn}${msgtxt}\n"
            ;;
        complete)
            printf "✅  ${txtgrn}${msgtxt}\n"
            ;;
        boom)
            printf "💥  ${txtwht}${msgtxt}\n" >&2
            ;;
        notice)
            printf "✴️  ${txtylw}${msgtxt}\n"
            ;;
        alert)
            printf "🚫  ${txtred}${msgtxt}\n" >&2
            ;;
        secret)
            printf "🔑  ${txtgrn}${msgtxt}\n"
            ;;
        *)
            printf "⁉️  ${txtwht}${msgtxt}\n" >&2
            ;;
    esac
    printf "${txtrst}"
}

_tfmsg() {
    tfmsg_out="$(echo "$1" | awk '{
           # strip control characters for printing and matching
           gsub(/\033\[[0-9]+m/,"")
        }
        /^(Apply complete|Destroy complete|Plan:)/ {
            print "greeting"
            print "Terraform", tolower($0)
            exit
        }
        /^Terraform.*initialized!/ {
            print "greeting"
            print
            exit
        }
        /^([0-9]+ error\(s\) occurred:|Failed to load backend)/ {
            print "alert"
            sub(/:.*/,"")
            print "Terraform", tolower($0)
            exit
        }')"

    if [ -n "$tfmsg_out" ]; then
        msg "$(echo "$tfmsg_out" | head -1)" \
                "$(echo "$tfmsg_out" | tail -1)"
    fi
}

_tflogdir() {
    if ! [ -d ./log ]; then
        mkdir ./log
    fi
}

_init() {
    tfout="$(terraform init 2>&1)"
    ret=$?
    init_out="./log/tf-$(date -u "+%Y-%m-%dT%H:%M:%SZ")-init.log"
    echo "$tfout" > "$init_out"
    _tfmsg "$tfout"
    return $ret
}

_apply() {
    tfout="$(terraform apply "$1" 2>&1)"
    ret=$?
    apply_out="./log/tf-$(date -u "+%Y-%m-%dT%H:%M:%SZ")-apply.log"
    echo "$tfout" > "$apply_out"
    _tfmsg "$tfout"
    return $ret
}

_plan() {
    tfout="$(terraform plan -out="$1" 2>&1)"
    ret=$?
    plan_out="./log/tf-$(date -u "+%Y-%m-%dT%H:%M:%SZ")-plan.log"
    echo "$tfout" > "$plan_out"
    _tfmsg "$tfout"
    return $ret
}

_destroy() {
    tfout="$(terraform destroy -force -state=./tfstate/terraform.tfstate 2>&1)"
    echo "$tfout" > ./log/tf-"$(date -u "+%Y-%m-%dT%H:%M:%SZ")"-destroy.log
    _tfmsg "$tfout"
    return $ret
}
